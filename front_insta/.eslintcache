[{"/Users/onda/Documents/handson/insta-clone/front_insta/src/index.tsx":"1","/Users/onda/Documents/handson/insta-clone/front_insta/src/serviceWorker.ts":"2","/Users/onda/Documents/handson/insta-clone/front_insta/src/app/store.ts":"3","/Users/onda/Documents/handson/insta-clone/front_insta/src/App.tsx":"4","/Users/onda/Documents/handson/insta-clone/front_insta/src/features/auth/authSlice.ts":"5","/Users/onda/Documents/handson/insta-clone/front_insta/src/features/core/Core.tsx":"6","/Users/onda/Documents/handson/insta-clone/front_insta/src/features/auth/Auth.tsx":"7","/Users/onda/Documents/handson/insta-clone/front_insta/src/features/post/postSlice.ts":"8"},{"size":648,"mtime":1607819984381,"results":"9","hashOfConfig":"10"},{"size":5424,"mtime":1607819984382,"results":"11","hashOfConfig":"10"},{"size":528,"mtime":1610183997994,"results":"12","hashOfConfig":"10"},{"size":238,"mtime":1609851194906,"results":"13","hashOfConfig":"10"},{"size":4813,"mtime":1610329439373,"results":"14","hashOfConfig":"10"},{"size":3255,"mtime":1610329248716,"results":"15","hashOfConfig":"10"},{"size":8155,"mtime":1610179242883,"results":"16","hashOfConfig":"10"},{"size":4845,"mtime":1610184278973,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1ejpzoq",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},"/Users/onda/Documents/handson/insta-clone/front_insta/src/index.tsx",[],["36","37"],"/Users/onda/Documents/handson/insta-clone/front_insta/src/serviceWorker.ts",[],"/Users/onda/Documents/handson/insta-clone/front_insta/src/app/store.ts",[],"/Users/onda/Documents/handson/insta-clone/front_insta/src/App.tsx",[],"/Users/onda/Documents/handson/insta-clone/front_insta/src/features/auth/authSlice.ts",[],"/Users/onda/Documents/handson/insta-clone/front_insta/src/features/core/Core.tsx",["38","39","40","41","42","43","44","45","46","47"],"/Users/onda/Documents/handson/insta-clone/front_insta/src/features/auth/Auth.tsx",[],"/Users/onda/Documents/handson/insta-clone/front_insta/src/features/post/postSlice.ts",["48","49","50"],"import { createSlice, createAsyncThunk, Action } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport axios from \"axios\";\nimport { PROPS_NEWPOST, PROPS_LIKED, PROPS_COMMENT } from \"../types\";\nimport { create } from \"yup/lib/Reference\";\nimport { CallToActionSharp } from \"@material-ui/icons\";\n\nconst apiUrlPost = `${process.env.REACT_APP_DEV_API_URL}api/post/`;\nconst apiUrlComment = `${process.env.REACT_APP_DEV_API_URL}api/comment/`;\n\nexport const fetchAsyncGetPosts = createAsyncThunk(\"post/get\", async () => {\n  const res = await axios.get(apiUrlPost, {\n    headers: {\n      Authorization: `JWT ${localStorage.localJWT}`,\n    },\n  });\n  return res.data;\n});\n\nexport const fetchAsyncNewPost = createAsyncThunk(\n  \"post/post\",\n  async (newPost: PROPS_NEWPOST) => {\n    const uploadData = new FormData();\n    uploadData.append(\"title\", newPost.title);\n    newPost.img && uploadData.append(\"img\", newPost.img, newPost.img.name);\n    const res = await axios.post(apiUrlPost, uploadData, {\n      headers: {\n        \"Context-Type\": \"application/json\",\n        Authorization: `JWT ${localStorage.localJWT}`,\n      },\n    });\n    return res.data;\n  }\n);\n\nexport const fetchAsyncPatchLiked = createAsyncThunk(\n  \"post/patch\",\n  async (liked: PROPS_LIKED) => {\n    const currentLiked = liked.current;\n    const uploadData = new FormData();\n\n    let isOverlapped = false;\n    currentLiked.forEach((current) => {\n      if (current === liked.new) {\n        isOverlapped = true;\n      } else {\n        uploadData.append(\"liked\", String(current));\n      }\n    });\n\n    if (!isOverlapped) {\n      uploadData.append(\"liked\", String(liked.new));\n    } else if (currentLiked.length === 1) {\n      uploadData.append(\"title\", liked.title);\n      const res = await axios.put(`${apiUrlPost}${liked.id}/`, uploadData, {\n        headers: {\n          \"Context-Type\": \"application/json\",\n          Authorization: `JWT ${localStorage.localJWT}`,\n        },\n      });\n      return res.data;\n    }\n    const res = await axios.patch(`${apiUrlPost}${liked.id}/`, uploadData, {\n      headers: {\n        \"Context-Type\": \"application/json\",\n        Authorization: `JWT ${localStorage.localJWT}`,\n      },\n    });\n    return res.data;\n  }\n);\n\nexport const fetchAsyncGetComments = createAsyncThunk(\n  \"comment/get\",\n  async () => {\n    const res = await axios.get(apiUrlComment, {\n      headers: {\n        Authorization: `JWT ${localStorage.localJWT}`,\n      },\n    })\n    return res.data;\n  }\n);\n\nexport const fetchAsyncPostComment = createAsyncThunk(\n  \"comment/post\",\n  async (comment: PROPS_COMMENT) => {\n    const res = await axios.post(apiUrlComment, comment, {\n      headers: {\n        Authorization: `JWT ${localStorage.localJWT}`,\n      },\n    });\n    return res.data;\n  }\n);\n\nexport const postSlice = createSlice({\n  name: \"post\",\n  initialState: {\n    isLoadingPost: false,\n    openNewPost: false,\n    posts: [\n      {\n        id: 0,\n        title: \"\",\n        userPost: 0,\n        created_on: \"\",\n        img: \"\",\n        liked: [0],\n      },\n    ],\n    comments: [\n      {\n        id: 0,\n        text: \"\",\n        userComment: 0,\n        post: 0,\n      },\n    ],\n  },\n  reducers: {\n    fetchPostStart(state) {\n      state.isLoadingPost = true;\n    },\n    fetchPostEnd(state) {\n      state.isLoadingPost = false;\n    },\n    setOpenNewPost(state) {\n      state.openNewPost = true;\n    },\n    resetOpenNewPost(state) {\n      state.openNewPost = false;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchAsyncGetPosts.fulfilled, (state, action) => {\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    });\n    builder.addCase(fetchAsyncNewPost.fulfilled, (state, action) => {\n      return {\n        ...state,\n        posts: [...state.posts, action.payload],\n      };\n    });\n    builder.addCase(fetchAsyncGetComments.fulfilled, (state, action) => {\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    });\n    builder.addCase(fetchAsyncPostComment.fulfilled, (state, action) => {\n      return {\n        ...state,\n        posts: [...state.comments, action.payload],\n      };\n    });\n    builder.addCase(fetchAsyncPatchLiked.fulfilled, (state, action) => {\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post.id === action.payload.id ? action.payload : post\n        ),\n      };\n    });\n  },\n});\n\nexport const {\n  fetchPostStart,\n  fetchPostEnd,\n  setOpenNewPost,\n  resetOpenNewPost,\n} = postSlice.actions;\n\nexport const selectIsLoadingPost = (state: RootState) =>\n  state.post.isLoadingPost;\nexport const selectOpenNewPost = (state: RootState) => state.post.openNewPost;\nexport const selectPosts = (state: RootState) => state.post.posts;\nexport const selectComments = (state: RootState) => state.post.comments;\n\nexport default postSlice.reducer;\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":11,"column":3,"nodeType":"57","messageId":"58","endLine":11,"endColumn":7},{"ruleId":"55","severity":1,"message":"59","line":12,"column":3,"nodeType":"57","messageId":"58","endLine":12,"endColumn":9},{"ruleId":"55","severity":1,"message":"60","line":14,"column":3,"nodeType":"57","messageId":"58","endLine":14,"endColumn":19},{"ruleId":"55","severity":1,"message":"61","line":25,"column":3,"nodeType":"57","messageId":"58","endLine":25,"endColumn":16},{"ruleId":"55","severity":1,"message":"62","line":26,"column":3,"nodeType":"57","messageId":"58","endLine":26,"endColumn":18},{"ruleId":"55","severity":1,"message":"63","line":27,"column":3,"nodeType":"57","messageId":"58","endLine":27,"endColumn":17},{"ruleId":"55","severity":1,"message":"64","line":42,"column":7,"nodeType":"57","messageId":"58","endLine":42,"endColumn":18},{"ruleId":"55","severity":1,"message":"65","line":74,"column":9,"nodeType":"57","messageId":"58","endLine":74,"endColumn":14},{"ruleId":"55","severity":1,"message":"66","line":75,"column":9,"nodeType":"57","messageId":"58","endLine":75,"endColumn":22},{"ruleId":"55","severity":1,"message":"67","line":76,"column":9,"nodeType":"57","messageId":"58","endLine":76,"endColumn":22},{"ruleId":"55","severity":1,"message":"68","line":1,"column":41,"nodeType":"57","messageId":"58","endLine":1,"endColumn":47},{"ruleId":"55","severity":1,"message":"69","line":5,"column":10,"nodeType":"57","messageId":"58","endLine":5,"endColumn":16},{"ruleId":"55","severity":1,"message":"70","line":6,"column":10,"nodeType":"57","messageId":"58","endLine":6,"endColumn":27},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"@typescript-eslint/no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'Avatar' is defined but never used.","'CircularProgress' is defined but never used.","'setOpenSignUp' is defined but never used.","'resetOpenSignUp' is defined but never used.","'setOpenProfile' is defined but never used.","'StyledBadge' is assigned a value but never used.","'posts' is assigned a value but never used.","'isLoadingPost' is assigned a value but never used.","'isLoadingAuth' is assigned a value but never used.","'Action' is defined but never used.","'create' is defined but never used.","'CallToActionSharp' is defined but never used.","no-global-assign","no-unsafe-negation"]